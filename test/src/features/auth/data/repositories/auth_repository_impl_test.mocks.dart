// Mocks generated by Mockito 5.4.6 from annotations
// in ecommerce/test/src/features/auth/data/repositories/auth_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:connectivity_plus/connectivity_plus.dart' as _i8;
import 'package:ecommerce/src/core/network/network_info.dart' as _i7;
import 'package:ecommerce/src/features/auth/data/datasources/auth_local_data_source.dart'
    as _i6;
import 'package:ecommerce/src/features/auth/data/datasources/auth_remote_data_source.dart'
    as _i3;
import 'package:ecommerce/src/features/auth/data/models/user_model.dart' as _i2;
import 'package:ecommerce/src/features/auth/domain/usecases/auth_params.dart'
    as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUserModel_0 extends _i1.SmartFake implements _i2.UserModel {
  _FakeUserModel_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [AuthRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRemoteDataSource extends _i1.Mock
    implements _i3.AuthRemoteDataSource {
  MockAuthRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.UserModel> login(_i5.LoginParams? params) =>
      (super.noSuchMethod(
            Invocation.method(#login, [params]),
            returnValue: _i4.Future<_i2.UserModel>.value(
              _FakeUserModel_0(this, Invocation.method(#login, [params])),
            ),
          )
          as _i4.Future<_i2.UserModel>);

  @override
  _i4.Future<_i2.UserModel> register(_i5.RegisterParams? params) =>
      (super.noSuchMethod(
            Invocation.method(#register, [params]),
            returnValue: _i4.Future<_i2.UserModel>.value(
              _FakeUserModel_0(this, Invocation.method(#register, [params])),
            ),
          )
          as _i4.Future<_i2.UserModel>);

  @override
  _i4.Future<void> logout() =>
      (super.noSuchMethod(
            Invocation.method(#logout, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<_i2.UserModel?> getCurrentUser() =>
      (super.noSuchMethod(
            Invocation.method(#getCurrentUser, []),
            returnValue: _i4.Future<_i2.UserModel?>.value(),
          )
          as _i4.Future<_i2.UserModel?>);

  @override
  _i4.Future<bool> isAuthenticated() =>
      (super.noSuchMethod(
            Invocation.method(#isAuthenticated, []),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);
}

/// A class which mocks [AuthLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthLocalDataSource extends _i1.Mock
    implements _i6.AuthLocalDataSource {
  MockAuthLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> cacheUser(_i2.UserModel? user) =>
      (super.noSuchMethod(
            Invocation.method(#cacheUser, [user]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<_i2.UserModel?> getCachedUser() =>
      (super.noSuchMethod(
            Invocation.method(#getCachedUser, []),
            returnValue: _i4.Future<_i2.UserModel?>.value(),
          )
          as _i4.Future<_i2.UserModel?>);

  @override
  _i4.Future<void> clearCachedUser() =>
      (super.noSuchMethod(
            Invocation.method(#clearCachedUser, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<bool> isUserCached() =>
      (super.noSuchMethod(
            Invocation.method(#isUserCached, []),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i7.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> get isConnected =>
      (super.noSuchMethod(
            Invocation.getter(#isConnected),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Stream<List<_i8.ConnectivityResult>> get connectivityStream =>
      (super.noSuchMethod(
            Invocation.getter(#connectivityStream),
            returnValue: _i4.Stream<List<_i8.ConnectivityResult>>.empty(),
          )
          as _i4.Stream<List<_i8.ConnectivityResult>>);
}
