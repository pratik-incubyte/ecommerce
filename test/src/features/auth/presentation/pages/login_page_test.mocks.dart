// Mocks generated by Mockito 5.4.6 from annotations
// in ecommerce/test/src/features/auth/presentation/pages/login_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i14;

import 'package:ecommerce/src/features/auth/domain/usecases/get_current_user_usecase.dart'
    as _i5;
import 'package:ecommerce/src/features/auth/domain/usecases/login_usecase.dart'
    as _i2;
import 'package:ecommerce/src/features/auth/domain/usecases/logout_usecase.dart'
    as _i4;
import 'package:ecommerce/src/features/auth/domain/usecases/register_usecase.dart'
    as _i3;
import 'package:ecommerce/src/features/auth/presentation/bloc/auth_bloc.dart'
    as _i13;
import 'package:ecommerce/src/features/auth/presentation/bloc/auth_event.dart'
    as _i15;
import 'package:ecommerce/src/features/auth/presentation/bloc/auth_state.dart'
    as _i6;
import 'package:flutter/widgets.dart' as _i8;
import 'package:flutter_bloc/flutter_bloc.dart' as _i16;
import 'package:go_router/src/configuration.dart' as _i7;
import 'package:go_router/src/delegate.dart' as _i9;
import 'package:go_router/src/information_provider.dart' as _i10;
import 'package:go_router/src/match.dart' as _i19;
import 'package:go_router/src/parser.dart' as _i11;
import 'package:go_router/src/router.dart' as _i17;
import 'package:go_router/src/state.dart' as _i12;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i18;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLoginUseCase_0 extends _i1.SmartFake implements _i2.LoginUseCase {
  _FakeLoginUseCase_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeRegisterUseCase_1 extends _i1.SmartFake
    implements _i3.RegisterUseCase {
  _FakeRegisterUseCase_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeLogoutUseCase_2 extends _i1.SmartFake implements _i4.LogoutUseCase {
  _FakeLogoutUseCase_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeGetCurrentUserUseCase_3 extends _i1.SmartFake
    implements _i5.GetCurrentUserUseCase {
  _FakeGetCurrentUserUseCase_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAuthState_4 extends _i1.SmartFake implements _i6.AuthState {
  _FakeAuthState_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeRouteConfiguration_5 extends _i1.SmartFake
    implements _i7.RouteConfiguration {
  _FakeRouteConfiguration_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeBackButtonDispatcher_6 extends _i1.SmartFake
    implements _i8.BackButtonDispatcher {
  _FakeBackButtonDispatcher_6(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeGoRouterDelegate_7 extends _i1.SmartFake
    implements _i9.GoRouterDelegate {
  _FakeGoRouterDelegate_7(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeGoRouteInformationProvider_8 extends _i1.SmartFake
    implements _i10.GoRouteInformationProvider {
  _FakeGoRouteInformationProvider_8(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeGoRouteInformationParser_9 extends _i1.SmartFake
    implements _i11.GoRouteInformationParser {
  _FakeGoRouteInformationParser_9(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeGoRouterState_10 extends _i1.SmartFake
    implements _i12.GoRouterState {
  _FakeGoRouterState_10(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [AuthBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthBloc extends _i1.Mock implements _i13.AuthBloc {
  MockAuthBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.LoginUseCase get loginUseCase =>
      (super.noSuchMethod(
            Invocation.getter(#loginUseCase),
            returnValue: _FakeLoginUseCase_0(
              this,
              Invocation.getter(#loginUseCase),
            ),
          )
          as _i2.LoginUseCase);

  @override
  _i3.RegisterUseCase get registerUseCase =>
      (super.noSuchMethod(
            Invocation.getter(#registerUseCase),
            returnValue: _FakeRegisterUseCase_1(
              this,
              Invocation.getter(#registerUseCase),
            ),
          )
          as _i3.RegisterUseCase);

  @override
  _i4.LogoutUseCase get logoutUseCase =>
      (super.noSuchMethod(
            Invocation.getter(#logoutUseCase),
            returnValue: _FakeLogoutUseCase_2(
              this,
              Invocation.getter(#logoutUseCase),
            ),
          )
          as _i4.LogoutUseCase);

  @override
  _i5.GetCurrentUserUseCase get getCurrentUserUseCase =>
      (super.noSuchMethod(
            Invocation.getter(#getCurrentUserUseCase),
            returnValue: _FakeGetCurrentUserUseCase_3(
              this,
              Invocation.getter(#getCurrentUserUseCase),
            ),
          )
          as _i5.GetCurrentUserUseCase);

  @override
  _i6.AuthState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeAuthState_4(this, Invocation.getter(#state)),
          )
          as _i6.AuthState);

  @override
  _i14.Stream<_i6.AuthState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i14.Stream<_i6.AuthState>.empty(),
          )
          as _i14.Stream<_i6.AuthState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);

  @override
  void add(_i15.AuthEvent? event) => super.noSuchMethod(
    Invocation.method(#add, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void onEvent(_i15.AuthEvent? event) => super.noSuchMethod(
    Invocation.method(#onEvent, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void emit(_i6.AuthState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void on<E extends _i15.AuthEvent>(
    _i16.EventHandler<E, _i6.AuthState>? handler, {
    _i16.EventTransformer<E>? transformer,
  }) => super.noSuchMethod(
    Invocation.method(#on, [handler], {#transformer: transformer}),
    returnValueForMissingStub: null,
  );

  @override
  void onTransition(
    _i16.Transition<_i15.AuthEvent, _i6.AuthState>? transition,
  ) => super.noSuchMethod(
    Invocation.method(#onTransition, [transition]),
    returnValueForMissingStub: null,
  );

  @override
  _i14.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i14.Future<void>.value(),
            returnValueForMissingStub: _i14.Future<void>.value(),
          )
          as _i14.Future<void>);

  @override
  void onChange(_i16.Change<_i6.AuthState>? change) => super.noSuchMethod(
    Invocation.method(#onChange, [change]),
    returnValueForMissingStub: null,
  );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [GoRouter].
///
/// See the documentation for Mockito's code generation for more information.
class MockGoRouter extends _i1.Mock implements _i17.GoRouter {
  MockGoRouter() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.RouteConfiguration get configuration =>
      (super.noSuchMethod(
            Invocation.getter(#configuration),
            returnValue: _FakeRouteConfiguration_5(
              this,
              Invocation.getter(#configuration),
            ),
          )
          as _i7.RouteConfiguration);

  @override
  _i8.BackButtonDispatcher get backButtonDispatcher =>
      (super.noSuchMethod(
            Invocation.getter(#backButtonDispatcher),
            returnValue: _FakeBackButtonDispatcher_6(
              this,
              Invocation.getter(#backButtonDispatcher),
            ),
          )
          as _i8.BackButtonDispatcher);

  @override
  _i9.GoRouterDelegate get routerDelegate =>
      (super.noSuchMethod(
            Invocation.getter(#routerDelegate),
            returnValue: _FakeGoRouterDelegate_7(
              this,
              Invocation.getter(#routerDelegate),
            ),
          )
          as _i9.GoRouterDelegate);

  @override
  _i10.GoRouteInformationProvider get routeInformationProvider =>
      (super.noSuchMethod(
            Invocation.getter(#routeInformationProvider),
            returnValue: _FakeGoRouteInformationProvider_8(
              this,
              Invocation.getter(#routeInformationProvider),
            ),
          )
          as _i10.GoRouteInformationProvider);

  @override
  _i11.GoRouteInformationParser get routeInformationParser =>
      (super.noSuchMethod(
            Invocation.getter(#routeInformationParser),
            returnValue: _FakeGoRouteInformationParser_9(
              this,
              Invocation.getter(#routeInformationParser),
            ),
          )
          as _i11.GoRouteInformationParser);

  @override
  bool get overridePlatformDefaultLocation =>
      (super.noSuchMethod(
            Invocation.getter(#overridePlatformDefaultLocation),
            returnValue: false,
          )
          as bool);

  @override
  _i12.GoRouterState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeGoRouterState_10(this, Invocation.getter(#state)),
          )
          as _i12.GoRouterState);

  @override
  set configuration(_i7.RouteConfiguration? _configuration) =>
      super.noSuchMethod(
        Invocation.setter(#configuration, _configuration),
        returnValueForMissingStub: null,
      );

  @override
  set routerDelegate(_i9.GoRouterDelegate? _routerDelegate) =>
      super.noSuchMethod(
        Invocation.setter(#routerDelegate, _routerDelegate),
        returnValueForMissingStub: null,
      );

  @override
  set routeInformationProvider(
    _i10.GoRouteInformationProvider? _routeInformationProvider,
  ) => super.noSuchMethod(
    Invocation.setter(#routeInformationProvider, _routeInformationProvider),
    returnValueForMissingStub: null,
  );

  @override
  set routeInformationParser(
    _i11.GoRouteInformationParser? _routeInformationParser,
  ) => super.noSuchMethod(
    Invocation.setter(#routeInformationParser, _routeInformationParser),
    returnValueForMissingStub: null,
  );

  @override
  bool canPop() =>
      (super.noSuchMethod(Invocation.method(#canPop, []), returnValue: false)
          as bool);

  @override
  String namedLocation(
    String? name, {
    Map<String, String>? pathParameters = const {},
    Map<String, dynamic>? queryParameters = const {},
    String? fragment,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #namedLocation,
              [name],
              {
                #pathParameters: pathParameters,
                #queryParameters: queryParameters,
                #fragment: fragment,
              },
            ),
            returnValue: _i18.dummyValue<String>(
              this,
              Invocation.method(
                #namedLocation,
                [name],
                {
                  #pathParameters: pathParameters,
                  #queryParameters: queryParameters,
                  #fragment: fragment,
                },
              ),
            ),
          )
          as String);

  @override
  void go(String? location, {Object? extra}) => super.noSuchMethod(
    Invocation.method(#go, [location], {#extra: extra}),
    returnValueForMissingStub: null,
  );

  @override
  void restore(_i19.RouteMatchList? matchList) => super.noSuchMethod(
    Invocation.method(#restore, [matchList]),
    returnValueForMissingStub: null,
  );

  @override
  void goNamed(
    String? name, {
    Map<String, String>? pathParameters = const {},
    Map<String, dynamic>? queryParameters = const {},
    Object? extra,
    String? fragment,
  }) => super.noSuchMethod(
    Invocation.method(
      #goNamed,
      [name],
      {
        #pathParameters: pathParameters,
        #queryParameters: queryParameters,
        #extra: extra,
        #fragment: fragment,
      },
    ),
    returnValueForMissingStub: null,
  );

  @override
  _i14.Future<T?> push<T extends Object?>(String? location, {Object? extra}) =>
      (super.noSuchMethod(
            Invocation.method(#push, [location], {#extra: extra}),
            returnValue: _i14.Future<T?>.value(),
          )
          as _i14.Future<T?>);

  @override
  _i14.Future<T?> pushNamed<T extends Object?>(
    String? name, {
    Map<String, String>? pathParameters = const {},
    Map<String, dynamic>? queryParameters = const {},
    Object? extra,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #pushNamed,
              [name],
              {
                #pathParameters: pathParameters,
                #queryParameters: queryParameters,
                #extra: extra,
              },
            ),
            returnValue: _i14.Future<T?>.value(),
          )
          as _i14.Future<T?>);

  @override
  _i14.Future<T?> pushReplacement<T extends Object?>(
    String? location, {
    Object? extra,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#pushReplacement, [location], {#extra: extra}),
            returnValue: _i14.Future<T?>.value(),
          )
          as _i14.Future<T?>);

  @override
  _i14.Future<T?> pushReplacementNamed<T extends Object?>(
    String? name, {
    Map<String, String>? pathParameters = const {},
    Map<String, dynamic>? queryParameters = const {},
    Object? extra,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #pushReplacementNamed,
              [name],
              {
                #pathParameters: pathParameters,
                #queryParameters: queryParameters,
                #extra: extra,
              },
            ),
            returnValue: _i14.Future<T?>.value(),
          )
          as _i14.Future<T?>);

  @override
  _i14.Future<T?> replace<T>(String? location, {Object? extra}) =>
      (super.noSuchMethod(
            Invocation.method(#replace, [location], {#extra: extra}),
            returnValue: _i14.Future<T?>.value(),
          )
          as _i14.Future<T?>);

  @override
  _i14.Future<T?> replaceNamed<T>(
    String? name, {
    Map<String, String>? pathParameters = const {},
    Map<String, dynamic>? queryParameters = const {},
    Object? extra,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #replaceNamed,
              [name],
              {
                #pathParameters: pathParameters,
                #queryParameters: queryParameters,
                #extra: extra,
              },
            ),
            returnValue: _i14.Future<T?>.value(),
          )
          as _i14.Future<T?>);

  @override
  void pop<T extends Object?>([T? result]) => super.noSuchMethod(
    Invocation.method(#pop, [result]),
    returnValueForMissingStub: null,
  );

  @override
  void refresh() => super.noSuchMethod(
    Invocation.method(#refresh, []),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}
