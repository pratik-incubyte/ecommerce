// Mocks generated by Mockito 5.4.6 from annotations
// in ecommerce/test/src/features/cart/data/repositories/cart_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:connectivity_plus/connectivity_plus.dart' as _i8;
import 'package:ecommerce/src/core/network/network_info.dart' as _i7;
import 'package:ecommerce/src/features/cart/data/datasources/cart_local_data_source.dart'
    as _i3;
import 'package:ecommerce/src/features/cart/data/datasources/cart_remote_data_source.dart'
    as _i6;
import 'package:ecommerce/src/features/cart/data/models/cart_item_model.dart'
    as _i2;
import 'package:ecommerce/src/features/cart/domain/entities/cart_item.dart'
    as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCartItemModel_0 extends _i1.SmartFake implements _i2.CartItemModel {
  _FakeCartItemModel_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [CartLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockCartLocalDataSource extends _i1.Mock
    implements _i3.CartLocalDataSource {
  MockCartLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.CartItemModel>> getCartItems(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#getCartItems, [userId]),
            returnValue: _i4.Future<List<_i2.CartItemModel>>.value(
              <_i2.CartItemModel>[],
            ),
          )
          as _i4.Future<List<_i2.CartItemModel>>);

  @override
  _i4.Future<_i2.CartItemModel?> getCartItem(String? userId, int? productId) =>
      (super.noSuchMethod(
            Invocation.method(#getCartItem, [userId, productId]),
            returnValue: _i4.Future<_i2.CartItemModel?>.value(),
          )
          as _i4.Future<_i2.CartItemModel?>);

  @override
  _i4.Future<void> cacheCartItem(_i5.CartItem? cartItem) =>
      (super.noSuchMethod(
            Invocation.method(#cacheCartItem, [cartItem]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> cacheCartItems(List<_i5.CartItem>? cartItems) =>
      (super.noSuchMethod(
            Invocation.method(#cacheCartItems, [cartItems]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> updateCartItem(_i5.CartItem? cartItem) =>
      (super.noSuchMethod(
            Invocation.method(#updateCartItem, [cartItem]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> removeCartItem(String? userId, int? productId) =>
      (super.noSuchMethod(
            Invocation.method(#removeCartItem, [userId, productId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> clearCart(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#clearCart, [userId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [CartRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockCartRemoteDataSource extends _i1.Mock
    implements _i6.CartRemoteDataSource {
  MockCartRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.CartItemModel> addToCart(_i2.CartItemModel? cartItem) =>
      (super.noSuchMethod(
            Invocation.method(#addToCart, [cartItem]),
            returnValue: _i4.Future<_i2.CartItemModel>.value(
              _FakeCartItemModel_0(
                this,
                Invocation.method(#addToCart, [cartItem]),
              ),
            ),
          )
          as _i4.Future<_i2.CartItemModel>);

  @override
  _i4.Future<List<_i2.CartItemModel>> getCartItems(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#getCartItems, [userId]),
            returnValue: _i4.Future<List<_i2.CartItemModel>>.value(
              <_i2.CartItemModel>[],
            ),
          )
          as _i4.Future<List<_i2.CartItemModel>>);

  @override
  _i4.Future<_i2.CartItemModel> updateCartItem(_i2.CartItemModel? cartItem) =>
      (super.noSuchMethod(
            Invocation.method(#updateCartItem, [cartItem]),
            returnValue: _i4.Future<_i2.CartItemModel>.value(
              _FakeCartItemModel_0(
                this,
                Invocation.method(#updateCartItem, [cartItem]),
              ),
            ),
          )
          as _i4.Future<_i2.CartItemModel>);

  @override
  _i4.Future<void> removeFromCart(String? userId, int? productId) =>
      (super.noSuchMethod(
            Invocation.method(#removeFromCart, [userId, productId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> clearCart(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#clearCart, [userId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<_i2.CartItemModel?> getCartItem(String? userId, int? productId) =>
      (super.noSuchMethod(
            Invocation.method(#getCartItem, [userId, productId]),
            returnValue: _i4.Future<_i2.CartItemModel?>.value(),
          )
          as _i4.Future<_i2.CartItemModel?>);
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i7.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> get isConnected =>
      (super.noSuchMethod(
            Invocation.getter(#isConnected),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Stream<List<_i8.ConnectivityResult>> get connectivityStream =>
      (super.noSuchMethod(
            Invocation.getter(#connectivityStream),
            returnValue: _i4.Stream<List<_i8.ConnectivityResult>>.empty(),
          )
          as _i4.Stream<List<_i8.ConnectivityResult>>);
}
