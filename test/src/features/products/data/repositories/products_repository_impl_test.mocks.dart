// Mocks generated by Mockito 5.4.6 from annotations
// in ecommerce/test/src/features/products/data/repositories/products_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:connectivity_plus/connectivity_plus.dart' as _i7;
import 'package:ecommerce/src/core/database/database.dart' as _i4;
import 'package:ecommerce/src/core/network/network_info.dart' as _i5;
import 'package:ecommerce/src/features/products/data/datasources/products_local_data_source.dart'
    as _i9;
import 'package:ecommerce/src/features/products/data/datasources/products_remote_data_source.dart'
    as _i8;
import 'package:ecommerce/src/features/products/data/models/product_model.dart'
    as _i2;
import 'package:ecommerce/src/features/products/domain/entities/product.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i10;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeProductModel_0 extends _i1.SmartFake implements _i2.ProductModel {
  _FakeProductModel_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeProduct_1 extends _i1.SmartFake implements _i3.Product {
  _FakeProduct_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeProductTableCompanion_2 extends _i1.SmartFake
    implements _i4.ProductTableCompanion {
  _FakeProductTableCompanion_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i5.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<bool> get isConnected =>
      (super.noSuchMethod(
            Invocation.getter(#isConnected),
            returnValue: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);

  @override
  _i6.Stream<List<_i7.ConnectivityResult>> get connectivityStream =>
      (super.noSuchMethod(
            Invocation.getter(#connectivityStream),
            returnValue: _i6.Stream<List<_i7.ConnectivityResult>>.empty(),
          )
          as _i6.Stream<List<_i7.ConnectivityResult>>);
}

/// A class which mocks [ProductsRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductsRemoteDataSource extends _i1.Mock
    implements _i8.ProductsRemoteDataSource {
  MockProductsRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<List<_i2.ProductModel>> getProducts() =>
      (super.noSuchMethod(
            Invocation.method(#getProducts, []),
            returnValue: _i6.Future<List<_i2.ProductModel>>.value(
              <_i2.ProductModel>[],
            ),
          )
          as _i6.Future<List<_i2.ProductModel>>);

  @override
  _i6.Future<_i2.ProductModel> getProduct(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#getProduct, [id]),
            returnValue: _i6.Future<_i2.ProductModel>.value(
              _FakeProductModel_0(this, Invocation.method(#getProduct, [id])),
            ),
          )
          as _i6.Future<_i2.ProductModel>);
}

/// A class which mocks [ProductsLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductsLocalDataSource extends _i1.Mock
    implements _i9.ProductsLocalDataSource {
  MockProductsLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<List<_i2.ProductModel>> getProducts() =>
      (super.noSuchMethod(
            Invocation.method(#getProducts, []),
            returnValue: _i6.Future<List<_i2.ProductModel>>.value(
              <_i2.ProductModel>[],
            ),
          )
          as _i6.Future<List<_i2.ProductModel>>);

  @override
  _i6.Future<_i2.ProductModel> getProduct(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#getProduct, [id]),
            returnValue: _i6.Future<_i2.ProductModel>.value(
              _FakeProductModel_0(this, Invocation.method(#getProduct, [id])),
            ),
          )
          as _i6.Future<_i2.ProductModel>);
}

/// A class which mocks [Product].
///
/// See the documentation for Mockito's code generation for more information.
class MockProduct extends _i1.Mock implements _i3.Product {
  MockProduct() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get id =>
      (super.noSuchMethod(Invocation.getter(#id), returnValue: 0) as int);

  @override
  String get title =>
      (super.noSuchMethod(
            Invocation.getter(#title),
            returnValue: _i10.dummyValue<String>(
              this,
              Invocation.getter(#title),
            ),
          )
          as String);

  @override
  String get description =>
      (super.noSuchMethod(
            Invocation.getter(#description),
            returnValue: _i10.dummyValue<String>(
              this,
              Invocation.getter(#description),
            ),
          )
          as String);

  @override
  String get brand =>
      (super.noSuchMethod(
            Invocation.getter(#brand),
            returnValue: _i10.dummyValue<String>(
              this,
              Invocation.getter(#brand),
            ),
          )
          as String);

  @override
  double get price =>
      (super.noSuchMethod(Invocation.getter(#price), returnValue: 0.0)
          as double);

  @override
  String get sku =>
      (super.noSuchMethod(
            Invocation.getter(#sku),
            returnValue: _i10.dummyValue<String>(this, Invocation.getter(#sku)),
          )
          as String);

  @override
  List<String> get images =>
      (super.noSuchMethod(Invocation.getter(#images), returnValue: <String>[])
          as List<String>);

  @override
  double get rating =>
      (super.noSuchMethod(Invocation.getter(#rating), returnValue: 0.0)
          as double);

  @override
  List<Object?> get props =>
      (super.noSuchMethod(Invocation.getter(#props), returnValue: <Object?>[])
          as List<Object?>);
}

/// A class which mocks [ProductModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductModel extends _i1.Mock implements _i2.ProductModel {
  MockProductModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get id =>
      (super.noSuchMethod(Invocation.getter(#id), returnValue: 0) as int);

  @override
  String get title =>
      (super.noSuchMethod(
            Invocation.getter(#title),
            returnValue: _i10.dummyValue<String>(
              this,
              Invocation.getter(#title),
            ),
          )
          as String);

  @override
  String get description =>
      (super.noSuchMethod(
            Invocation.getter(#description),
            returnValue: _i10.dummyValue<String>(
              this,
              Invocation.getter(#description),
            ),
          )
          as String);

  @override
  String get brand =>
      (super.noSuchMethod(
            Invocation.getter(#brand),
            returnValue: _i10.dummyValue<String>(
              this,
              Invocation.getter(#brand),
            ),
          )
          as String);

  @override
  double get price =>
      (super.noSuchMethod(Invocation.getter(#price), returnValue: 0.0)
          as double);

  @override
  String get sku =>
      (super.noSuchMethod(
            Invocation.getter(#sku),
            returnValue: _i10.dummyValue<String>(this, Invocation.getter(#sku)),
          )
          as String);

  @override
  List<String> get images =>
      (super.noSuchMethod(Invocation.getter(#images), returnValue: <String>[])
          as List<String>);

  @override
  double get rating =>
      (super.noSuchMethod(Invocation.getter(#rating), returnValue: 0.0)
          as double);

  @override
  List<Object?> get props =>
      (super.noSuchMethod(Invocation.getter(#props), returnValue: <Object?>[])
          as List<Object?>);

  @override
  Map<String, dynamic> toJson() =>
      (super.noSuchMethod(
            Invocation.method(#toJson, []),
            returnValue: <String, dynamic>{},
          )
          as Map<String, dynamic>);

  @override
  _i3.Product toEntity() =>
      (super.noSuchMethod(
            Invocation.method(#toEntity, []),
            returnValue: _FakeProduct_1(this, Invocation.method(#toEntity, [])),
          )
          as _i3.Product);

  @override
  _i4.ProductTableCompanion toDriftCompanion() =>
      (super.noSuchMethod(
            Invocation.method(#toDriftCompanion, []),
            returnValue: _FakeProductTableCompanion_2(
              this,
              Invocation.method(#toDriftCompanion, []),
            ),
          )
          as _i4.ProductTableCompanion);

  @override
  _i4.ProductTableCompanion toDriftCompanionForInsert() =>
      (super.noSuchMethod(
            Invocation.method(#toDriftCompanionForInsert, []),
            returnValue: _FakeProductTableCompanion_2(
              this,
              Invocation.method(#toDriftCompanionForInsert, []),
            ),
          )
          as _i4.ProductTableCompanion);
}
