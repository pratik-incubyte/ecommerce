// Mocks generated by Mockito 5.4.6 from annotations
// in ecommerce/test/src/features/products/domain/usecases/get_products_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:ecommerce/src/core/error/failures.dart' as _i5;
import 'package:ecommerce/src/features/products/domain/entities/product.dart'
    as _i6;
import 'package:ecommerce/src/features/products/domain/repositories/products_repository.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [ProductsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductsRepository extends _i1.Mock
    implements _i3.ProductsRepository {
  MockProductsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Product>>> getProducts() =>
      (super.noSuchMethod(
            Invocation.method(#getProducts, []),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, List<_i6.Product>>>.value(
                  _FakeEither_0<_i5.Failure, List<_i6.Product>>(
                    this,
                    Invocation.method(#getProducts, []),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Product>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Product>> getProduct({
    required int? id,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getProduct, [], {#id: id}),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Product>>.value(
              _FakeEither_0<_i5.Failure, _i6.Product>(
                this,
                Invocation.method(#getProduct, [], {#id: id}),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i6.Product>>);
}

/// A class which mocks [Product].
///
/// See the documentation for Mockito's code generation for more information.
class MockProduct extends _i1.Mock implements _i6.Product {
  MockProduct() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get id =>
      (super.noSuchMethod(Invocation.getter(#id), returnValue: 0) as int);

  @override
  String get title =>
      (super.noSuchMethod(
            Invocation.getter(#title),
            returnValue: _i7.dummyValue<String>(
              this,
              Invocation.getter(#title),
            ),
          )
          as String);

  @override
  String get description =>
      (super.noSuchMethod(
            Invocation.getter(#description),
            returnValue: _i7.dummyValue<String>(
              this,
              Invocation.getter(#description),
            ),
          )
          as String);

  @override
  String get brand =>
      (super.noSuchMethod(
            Invocation.getter(#brand),
            returnValue: _i7.dummyValue<String>(
              this,
              Invocation.getter(#brand),
            ),
          )
          as String);

  @override
  double get price =>
      (super.noSuchMethod(Invocation.getter(#price), returnValue: 0.0)
          as double);

  @override
  String get sku =>
      (super.noSuchMethod(
            Invocation.getter(#sku),
            returnValue: _i7.dummyValue<String>(this, Invocation.getter(#sku)),
          )
          as String);

  @override
  List<String> get images =>
      (super.noSuchMethod(Invocation.getter(#images), returnValue: <String>[])
          as List<String>);

  @override
  double get rating =>
      (super.noSuchMethod(Invocation.getter(#rating), returnValue: 0.0)
          as double);

  @override
  List<Object?> get props =>
      (super.noSuchMethod(Invocation.getter(#props), returnValue: <Object?>[])
          as List<Object?>);
}
