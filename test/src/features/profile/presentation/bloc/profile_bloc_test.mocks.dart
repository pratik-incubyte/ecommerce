// Mocks generated by Mockito 5.4.6 from annotations
// in ecommerce/test/src/features/profile/presentation/bloc/profile_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:ecommerce/src/core/error/failures.dart' as _i6;
import 'package:ecommerce/src/core/utils/usecase.dart' as _i8;
import 'package:ecommerce/src/features/auth/domain/entities/user_entity.dart'
    as _i7;
import 'package:ecommerce/src/features/profile/domain/repositories/profile_repository.dart'
    as _i2;
import 'package:ecommerce/src/features/profile/domain/usecases/change_password_usecase.dart'
    as _i11;
import 'package:ecommerce/src/features/profile/domain/usecases/get_current_profile_usecase.dart'
    as _i4;
import 'package:ecommerce/src/features/profile/domain/usecases/update_profile_picture_usecase.dart'
    as _i10;
import 'package:ecommerce/src/features/profile/domain/usecases/update_profile_usecase.dart'
    as _i9;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeProfileRepository_0 extends _i1.SmartFake
    implements _i2.ProfileRepository {
  _FakeProfileRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [GetCurrentProfileUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetCurrentProfileUseCase extends _i1.Mock
    implements _i4.GetCurrentProfileUseCase {
  MockGetCurrentProfileUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ProfileRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeProfileRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.ProfileRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.UserEntity>> call(
    _i8.NoParams? params,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue:
                _i5.Future<_i3.Either<_i6.Failure, _i7.UserEntity>>.value(
                  _FakeEither_1<_i6.Failure, _i7.UserEntity>(
                    this,
                    Invocation.method(#call, [params]),
                  ),
                ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, _i7.UserEntity>>);
}

/// A class which mocks [UpdateProfileUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateProfileUseCase extends _i1.Mock
    implements _i9.UpdateProfileUseCase {
  MockUpdateProfileUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ProfileRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeProfileRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.ProfileRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.UserEntity>> call(
    _i9.UpdateProfileParams? params,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue:
                _i5.Future<_i3.Either<_i6.Failure, _i7.UserEntity>>.value(
                  _FakeEither_1<_i6.Failure, _i7.UserEntity>(
                    this,
                    Invocation.method(#call, [params]),
                  ),
                ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, _i7.UserEntity>>);
}

/// A class which mocks [UpdateProfilePictureUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateProfilePictureUseCase extends _i1.Mock
    implements _i10.UpdateProfilePictureUseCase {
  MockUpdateProfilePictureUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ProfileRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeProfileRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.ProfileRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, String>> call(
    _i10.UpdateProfilePictureParams? params,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue: _i5.Future<_i3.Either<_i6.Failure, String>>.value(
              _FakeEither_1<_i6.Failure, String>(
                this,
                Invocation.method(#call, [params]),
              ),
            ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, String>>);
}

/// A class which mocks [ChangePasswordUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockChangePasswordUseCase extends _i1.Mock
    implements _i11.ChangePasswordUseCase {
  MockChangePasswordUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ProfileRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeProfileRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.ProfileRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i3.Unit>> call(
    _i11.ChangePasswordParams? params,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue: _i5.Future<_i3.Either<_i6.Failure, _i3.Unit>>.value(
              _FakeEither_1<_i6.Failure, _i3.Unit>(
                this,
                Invocation.method(#call, [params]),
              ),
            ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, _i3.Unit>>);
}
